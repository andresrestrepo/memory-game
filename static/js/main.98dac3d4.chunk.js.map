{"version":3,"sources":["components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Board","addToast","useToasts","useState","id","color","opacity","items","setItems","moves","setMoves","userMoves","setUserMoves","inProgress","setInProgress","nextMove","random","Math","floor","movesAux","push","modifyItems","setTimeout","defautItems","map","item","button","Button","outline","onClick","disabled","className","style","background","length","currentMoves","currentUserMoves","valid","entries","i","console","log","appearance","autoDismiss","onBoardClick","Progress","value","App","Container","Alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.98dac3d4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport \"./Board.css\";\nimport { Button } from 'reactstrap';\nimport { Progress } from 'reactstrap';\nimport { useToasts } from 'react-toast-notifications';\n\n\nconst Board = () => {\n    const { addToast } = useToasts();\n\n\n    const [items, setItems] = useState([\n        {\n            id: 0,\n            color: \"#0062cc\",\n            opacity: \"1\"\n        },\n        {\n            id: 1,\n            color: \"#bd2130\",\n            opacity: \"1\"\n        },\n        {\n            id: 2,\n            color: \"#28a745\",\n            opacity: \"1\"\n        },\n        {\n            id: 3,\n            color: \"#ffc107\",\n            opacity: \"1\"\n        }\n    ])\n\n    const [moves, setMoves] = useState([]);\n    const [userMoves, setUserMoves] = useState([]);\n\n    const [inProgress, setInProgress] = useState(false);\n\n\n\n    const nextMove = () => {\n        let random = Math.floor(Math.random() * 4);\n\n        let movesAux = [...moves];\n        movesAux.push(random);\n        setMoves(movesAux);\n\n        let modifyItems = [...items];\n        modifyItems[random].opacity = \"0.2\";\n\n        setItems(modifyItems);\n\n        setTimeout(() => {\n            const defautItems = items.map(item => {\n                item.opacity = \"1\";\n                return item;\n            });\n            setItems(defautItems);\n        }, 1000);\n    }\n\n    const startGame = () => {\n        setInProgress(true);\n\n        setMoves([]);\n        setUserMoves([]);\n\n        nextMove();\n    }\n\n\n    const onBoardClick = (id) => {\n        if (moves.length === 0) {\n            addToast('Click on Start Game...',\n            { appearance: 'warning', autoDismiss: true });\n            return;\n        }\n\n        let currentMoves = [...moves];\n        let currentUserMoves = [...userMoves];\n\n        currentUserMoves.push(id);\n\n        setUserMoves(currentUserMoves);\n\n        let valid = true;\n        for (const [i, v] of currentUserMoves.entries()) {\n            if (v !== currentMoves[i]) {\n                valid = false;\n            }\n        }\n\n        if (!valid) {\n            console.log(\"Nice try\");\n            setInProgress(false);\n            setMoves([]);\n            setUserMoves([]);\n            addToast('Good Try, Movements: ' + moves.length,\n                { appearance: 'info', autoDismiss: true });\n\n        } else {\n            if (currentUserMoves.length === currentMoves.length) {\n                setUserMoves([]);\n                nextMove();\n            }\n        }\n    }\n\n    let button = <Button outline color=\"success\" onClick={startGame}>Start Game</Button>\n    if (inProgress) {\n        button = <Button outline color=\"success\" disabled>In Progress</Button>\n    }\n\n    return (\n        <div>\n\n            <div className=\"Board-container\">\n                {items.map((item) =>\n                    <div className=\"Board\" key={item.id} style={{ background: item.color, opacity: item.opacity }}\n                        onClick={() => onBoardClick(item.id)}\n                    >\n                    </div>\n                )}\n            </div>\n\n\n            <div className=\"board-button-start\">\n                {button}\n            </div>\n            <div className=\"board-info\">\n                CPU: {moves.length} <br></br>\n                Player: {userMoves.length}\n            </div>\n            <br></br>\n            <Progress color=\"warning\" value={moves.length} />\n        </div>\n\n\n\n    )\n}\n\nexport default Board","import './App.css';\n\nimport { Container, Alert } from 'reactstrap';\n\nimport Board from './components/Board';\nimport { ToastProvider } from 'react-toast-notifications';\n\n\nfunction App() {\n\treturn (\n\t\t<ToastProvider>\n\t\t\t<Container>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Alert color=\"warning\">\n\t\t\t\t\t\tMEMORY GAME\n      \t\t\t</Alert>\n\n\t\t\t\t\t<Board />\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t</ToastProvider>\n\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}